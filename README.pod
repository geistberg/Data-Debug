=pod

=encoding UTF-8

=head1 NAME

Data::Debug - allows for basic data dumping and introspection.

=head1 VERSION

version 0.03

=head1 SYNOPSIS

  use Data::Debug; # auto imports debug, debug_warn
  use Data::Debug qw(debug debug_text caller_trace);

  my $hash = {
      foo => ['a', 'b', 'Foo','a', 'b', 'Foo','a', 'b', 'Foo','a'],
  };

  debug $hash; # or debug_warn $hash;

  debug;

  debug "hi";

  debug $hash, "hi", $hash;

  debug \@INC; # print to STDOUT, or format for web if $ENV{REQUEST_METHOD}

  debug_warn \@INC;  # same as debug but to STDOUT

  print FOO debug_text \@INC; # same as debug but return dump

  # ALSO #

  use Data::Debug qw(debug);

  debug; # same as debug

=head1 DESCRIPTION

Uses the base Data::Dumper of the distribution and gives it nicer formatting - and
allows for calling just about anytime during execution.

Calling Data::Debug::set_deparse() will allow for dumped output of subroutines
if available.

   perl -e 'use Data::Debug;  debug "foo", [1..10];'

See also L<Data::Dumper>.

Setting any of the Data::Dumper globals will alter the output.

=head1 FUNCTIONS

=head2 debug()

Prints out pretty output to STDOUT.  Formatted for the web if on the web.

It also returns the items called for it so that it can be used inline.

   my $foo = debug [2,3]; # foo will contain [2,3]

=head2 debug_warn()

Prints to STDERR.

=head2 debug_text()

Return the text as a scalar.

=head2 debug_plain()

Return a plainer string as a scalar.  This basically just avoids the attempt to
get variable names and line numbers and such.

If passed multiple values, each value is joined by a newline.  This has the
effect of placing an empty line between each one since each dump ends in a
newline already.

If called in void context, it displays the result on the default filehandle
(usually STDOUT).

=head2 debut_html()

HTML-ized output

=head2 caller_trace()

Caller trace returned as an arrayref.  Suitable for use like "debug caller_trace".
This does require at least perl 5.8.0's Carp.

=head2 content_typed()

Return truth if a content-type was sent

=head2 set_deparse()

set $DEPARSE=1

=head2 print_content_type()

sends the 'text/html' header, properly formatted to whether or not one has been sent

=head2 apache_request_sub()

Looks to see if you are in a mod_perl environment, and then retrieve the appropriate apache request object

=head1 AUTHORS

=over 4

=item *

'Paul Seamons <paul@seamons.com>'

=item *

'Russel Fisher <geistberg@gmail.com>'

=back

=head1 CONTRIBUTORS

=for stopwords gbingham James Lance Jason Hall

=over 4

=item *

gbingham <gbingham@bluehost.com>

=item *

James Lance <james@thelances.net>

=item *

Jason Hall <jayce@lug-nut.com>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by Paul Seamons.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
